{"ast":null,"code":"var _jsxFileName = \"/Users/luissantos/Desktop/Language_card/language-card/src/componets/Card.jsx\";\nimport Language from \"./Language\";\nimport { data } from \"../data/data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction Card() {\n  // console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"langWrapper\",\n      onClick: alert('test'),\n      children:\n      /*\n        Pour chaque objet, on rend un composant <Language /> :\n         {...obj} : utilise la décomposition des props (spread operator) → cela transmet toutes les propriétés de obj comme props au composant Language.\n         key={index} : une clé unique est requise par React quand on affiche des listes. Ici, on utilise l'index comme clé (pas idéal mais souvent suffisant pour des listes statiques).\n      */\n      data.map((obj, index) => /*#__PURE__*/_createElement(Language, {\n        ...obj,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["Language","data","jsxDEV","_jsxDEV","createElement","_createElement","Card","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","map","obj","index","key","__self","__source","_c","$RefreshReg$"],"sources":["/Users/luissantos/Desktop/Language_card/language-card/src/componets/Card.jsx"],"sourcesContent":["import Language from \"./Language\";\nimport { data } from \"../data/data\";\n\nfunction Card() {\n  // console.log(data);\n  return (\n    <div className=\"card\">\n      <h1>Language</h1>\n      <div className=\"langWrapper\" onClick={alert('test')}>\n        {\n          /*\n            Pour chaque objet, on rend un composant <Language /> :\n\n            {...obj} : utilise la décomposition des props (spread operator) → cela transmet toutes les propriétés de obj comme props au composant Language.\n\n            key={index} : une clé unique est requise par React quand on affiche des listes. Ici, on utilise l'index comme clé (pas idéal mais souvent suffisant pour des listes statiques).\n          */\n          data.map((obj, index) => (\n            <Language {...obj} key={index} />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\nexport default Card;\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,IAAI,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,aAAA,IAAAC,cAAA;AAEpC,SAASC,IAAIA,CAAA,EAAG;EACd;EACA,oBACEH,OAAA;IAAKI,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBL,OAAA;MAAAK,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBT,OAAA;MAAKI,SAAS,EAAC,aAAa;MAACM,OAAO,EAAEC,KAAK,CAAC,MAAM,CAAE;MAAAN,QAAA;MAEhD;AACV;AACA;AACA;AACA;MAGUP,IAAI,CAACc,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAClBZ,cAAA,CAACL,QAAQ;QAAA,GAAKgB,GAAG;QAAEE,GAAG,EAAED,KAAM;QAAAE,MAAA;QAAAC,QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CAAE,CACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACS,EAAA,GArBQf,IAAI;AAsBb,eAAeA,IAAI;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}