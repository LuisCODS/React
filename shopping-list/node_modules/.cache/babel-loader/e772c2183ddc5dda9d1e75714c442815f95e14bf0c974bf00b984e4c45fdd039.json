{"ast":null,"code":"var _jsxFileName = \"/Users/luissantos/Desktop/React and Next/shopping-list/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [items, setItems] = useState([]);\n  function addItem(newItem) {\n    /*\n      On utilise la syntaxe de décomposition [...items, newItem] au lieu de push() car:\n      1. React exige l'immutabilité - on ne doit pas modifier directement le state\n      2. push() modifie le tableau original, ce qui peut causer des bugs\n      3. [...items, newItem] crée une nouvelle copie du tableau avec le nouvel élément\n      4. Cela garantit que React détecte le changement et re-render correctement\n    */\n    setItems(items => [...items, newItem]);\n  }\n  ;\n  function deleteItem(id) {\n    /*\n      filtre et met à jour la liste des items:\n      . filter() crée un nouveau tableau avec les éléments qui passent la condition\n      . La condition item.id !== id garde tous les items SAUF celui avec l'id correspondant\n      . Cela supprime effectivement l'item avec l'id spécifié de la liste\n      . On utilise une fonction callback pour garantir l'accès au state le plus récent\n    */\n    setItems(items => items.filter(item => item.id !== id));\n  }\n  ;\n  function doneItem(id) {\n    /*\n      1. map() crée un nouveau tableau en parcourant tous les items\n      2. Pour chaque item, on vérifie si son id correspond à celui passé en paramètre\n      3. Si c'est le même id:\n         - {...item} copie toutes les propriétés de l'item\n         - packed: !item.packed inverse la valeur actuelle de packed (true->false ou false->true)\n      4. Si ce n'est pas le même id, on garde l'item tel quel\n      5. On utilise une fonction callback pour garantir l'accès au state le plus récent\n    */\n    setItems(items => items.map(item => item.id === id ? {\n      ...item,\n      packed: !item.packed\n    } : item));\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      items: items,\n      addItem: addItem,\n      deleteItem: deleteItem,\n      doneItem: doneItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      totalItem: items.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Main","Footer","useState","jsxDEV","_jsxDEV","App","_s","items","setItems","addItem","newItem","deleteItem","id","filter","item","doneItem","map","packed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","totalItem","length","_c","$RefreshReg$"],"sources":["/Users/luissantos/Desktop/React and Next/shopping-list/src/App.js"],"sourcesContent":["import Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport { useState } from \"react\";\n\nfunction App() {\n  const [items, setItems] = useState([]);\n\n  function addItem(newItem) {\n    /*\n      On utilise la syntaxe de décomposition [...items, newItem] au lieu de push() car:\n      1. React exige l'immutabilité - on ne doit pas modifier directement le state\n      2. push() modifie le tableau original, ce qui peut causer des bugs\n      3. [...items, newItem] crée une nouvelle copie du tableau avec le nouvel élément\n      4. Cela garantit que React détecte le changement et re-render correctement\n    */\n    setItems((items) => [...items, newItem]);\n  };\n\n  function deleteItem(id) {\n    /*\n      filtre et met à jour la liste des items:\n      . filter() crée un nouveau tableau avec les éléments qui passent la condition\n      . La condition item.id !== id garde tous les items SAUF celui avec l'id correspondant\n      . Cela supprime effectivement l'item avec l'id spécifié de la liste\n      . On utilise une fonction callback pour garantir l'accès au state le plus récent\n    */\n    setItems((items) => items.filter((item) => item.id !== id));\n  };\n\n  function doneItem(id) {\n    /*\n      1. map() crée un nouveau tableau en parcourant tous les items\n      2. Pour chaque item, on vérifie si son id correspond à celui passé en paramètre\n      3. Si c'est le même id:\n         - {...item} copie toutes les propriétés de l'item\n         - packed: !item.packed inverse la valeur actuelle de packed (true->false ou false->true)\n      4. Si ce n'est pas le même id, on garde l'item tel quel\n      5. On utilise une fonction callback pour garantir l'accès au state le plus récent\n    */\n    setItems((items) =>\n      items.map((item) =>\n        item.id === id ? { ...item, packed: !item.packed } : item));\n    };\n\n  return (\n    <div className=\"appWrapper\">\n      <Header />\n      <Main items={items} addItem = {addItem} deleteItem = {deleteItem} doneItem = {doneItem} />\n      <Footer totalItem={items.length} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtC,SAASO,OAAOA,CAACC,OAAO,EAAE;IACxB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIF,QAAQ,CAAED,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAEG,OAAO,CAAC,CAAC;EAC1C;EAAC;EAED,SAASC,UAAUA,CAACC,EAAE,EAAE;IACtB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIJ,QAAQ,CAAED,KAAK,IAAKA,KAAK,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC7D;EAAC;EAED,SAASG,QAAQA,CAACH,EAAE,EAAE;IACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIJ,QAAQ,CAAED,KAAK,IACbA,KAAK,CAACS,GAAG,CAAEF,IAAI,IACbA,IAAI,CAACF,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGE,IAAI;MAAEG,MAAM,EAAE,CAACH,IAAI,CAACG;IAAO,CAAC,GAAGH,IAAI,CAAC,CAAC;EAC/D;EAAC;EAEH,oBACEV,OAAA;IAAKc,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBf,OAAA,CAACL,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVnB,OAAA,CAACJ,IAAI;MAACO,KAAK,EAAEA,KAAM;MAACE,OAAO,EAAIA,OAAQ;MAACE,UAAU,EAAIA,UAAW;MAACI,QAAQ,EAAIA;IAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1FnB,OAAA,CAACH,MAAM;MAACuB,SAAS,EAAEjB,KAAK,CAACkB;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV;AAACjB,EAAA,CA/CQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}